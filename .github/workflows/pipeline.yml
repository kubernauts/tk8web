name: CICD

on: [push]

env:
  KUBE_CONFIG: "${{ secrets.KUBECONFIG }}"

jobs:
  pipeline:
    name: build and kubernetes deployment
    runs-on: ubuntu-18.04

    steps:
    - name: set calculated enviroment variables
      run: |
        echo ::set-env name=KUBE_NAMESPACE::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')
        echo ::set-env name=KUBE_DEPLOYMENT::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')
        echo ::set-env name=KUBE_LABEL::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')
        echo ::set-env name=KUBE_CONTAINERNAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')

    - name: Check out repository code
      uses: actions/checkout@v2

    - name: setup Node.js 10 env
      uses: actions/setup-node@v1
      with:
        node-version: '10.x'

    - name: Install on Node.js 10
      run: npm install

    - name: Build on Node.js 10
      run: npm run build -- --output-path=./dist/out 
      env:
        CI: true

    - name: Build docker image
      run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}:latest
    
    - name: Log into private registry
      run: echo "${{ secrets.DOCKER_PASSWD }}" | docker login ${{ secrets.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_UNAME }} --password-stdin
      
    - name: Push image to private registry and tag
      run: |
        IMAGE_NAME=${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}
        VERSION=$(echo $GITHUB_SHA | cut -c 1-6)
        echo VERSION=$VERSION
        echo ::set-env name=DOCKER_IMAGE_TAG::$(echo $IMAGE_NAME:$VERSION) 
        
        docker tag $IMAGE_NAME:latest $IMAGE_NAME:$VERSION
        docker push $IMAGE_NAME:$VERSION
        docker push $IMAGE_NAME:latest

    - name: Configure kubeconfig job node
      run: |
        mkdir -p ~/.kube
        echo $KUBE_CONFIG | base64 -d > ~/.kube/config

    - name: Rollout latest image to kubernetes
      run: |
        echo "kubectl validation"
        kubectl cluster-info
        
        echo "setting authentication for gitlab registry"
        kubectl -n $KUBE_NAMESPACE delete --ignore-not-found=true secret registry-auth
        kubectl -n $KUBE_NAMESPACE create secret docker-registry registry-auth --docker-server=${{ secrets.DOCKER_REGISTRY }} --docker-username=${{ secrets.DOCKER_UNAME }} --docker-password=${{ secrets.DOCKER_PASSWD }}
        
        echo "Deploying latest image"
        kubectl -n $KUBE_NAMESPACE get pods -l app=$KUBE_LABEL
        
        echo "set deployment to latest Image $DOCKER_IMAGE_TAG"
        kubectl -n $KUBE_NAMESPACE set image deployment $KUBE_DEPLOYMENT $KUBE_CONTAINERNAME=$DOCKER_IMAGE_TAG
        kubectl -n $KUBE_NAMESPACE rollout status deployment $KUBE_DEPLOYMENT
        
    - name: Cleanup kubeconfig
      if: ${{ always() }}
      run: |
        rm -f ~/.kube/config
      
    - name: slack hook
      uses: rtCamp/action-slack-notify@master
      env:
        SLACK_CHANNEL: alerts
        SLACK_COLOR: '#3278BD'
        SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/Octocat.png
        SLACK_TITLE: 'Github action successful :rocket:'
        SLACK_USERNAME: Octocat
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

